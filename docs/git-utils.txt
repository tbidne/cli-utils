-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/tbidne/git-utils#readme</a>
@package git-utils
@version 0.1.0.0


-- | Provides <a>Err</a> type for describing any errors encountered.
module Types.Error

-- | Wraps <a>Text</a> to describe an error. Git* errors describe errors
--   encountered by the underlying <a>MonadStaleBranches</a> monad. Others
--   describe pure errors encountered during parsing data returned by the
--   monad.
data Err
ParseLog :: Text -> Err
ParseDate :: Text -> Err
ParseName :: Text -> Err
ParseMerge :: Text -> Err
ReadInt :: Text -> Err
GitBranches :: Text -> Err
GitLog :: Text -> Err

-- | Alias for convenience.
type ErrOr a = Either Err a
instance GHC.Show.Show Types.Error.Err

module Types.Filtered

-- | Intermediate type to ensure <a>getStaleLogs</a> filters stale logs.
data Filtered a

-- | Constructs <a>Filtered</a> <i>a</i> based on filter function.
mkFiltered :: (a -> Bool) -> [a] -> Filtered a
unFiltered :: Filtered a -> [a]
instance GHC.Base.Monad Types.Filtered.Filtered
instance GHC.Base.Applicative Types.Filtered.Filtered
instance GHC.Base.Functor Types.Filtered.Filtered
instance GHC.Show.Show a => GHC.Show.Show (Types.Filtered.Filtered a)


-- | Provides types to describe data returned by the underlying
--   <a>MonadStaleBranches</a> monad.
module Types.GitTypes

-- | Branch Name.
newtype Name
Name :: Text -> Name

-- | Branch Author.
newtype Author
Author :: Text -> Author

-- | Intermediate tuple for (<a>Name</a>, log info).
type NameLog = (Name, Text)

-- | Intermediate tuple for (<a>Name</a>, <a>Author</a>, date string)
type NameAuthDateStr = (Name, Author, Text)

-- | Intermediate tuple for (<a>Name</a>, <a>Author</a>, <a>Day</a>)
type NameAuthDay = (Name, Author, Day)
instance GHC.Show.Show Types.GitTypes.Author
instance GHC.Classes.Ord Types.GitTypes.Author
instance GHC.Classes.Eq Types.GitTypes.Author
instance GHC.Show.Show Types.GitTypes.Name
instance GHC.Classes.Ord Types.GitTypes.Name
instance GHC.Classes.Eq Types.GitTypes.Name


-- | Provides types for holding branch information.
module Types.Branch

-- | Hides <a>BranchStatus</a> type parameter, used for processing
--   <a>Branch</a> a in heterogeneous collections.
data AnyBranch
[MergedBranch] :: Branch 'Merged -> AnyBranch
[UnMergedBranch] :: Branch 'UnMerged -> AnyBranch

-- | Promoted data type used for adding type-safe merge status to branches.
data BranchStatus
[Merged] :: BranchStatus
[UnMerged] :: BranchStatus

-- | Holds branch information with phantom <a>BranchStatus</a>.
data Branch (a :: BranchStatus)
[MkBranch] :: Name -> Author -> Day -> Branch a

-- | Maps each [<a>Branch</a>] to its <a>Text</a> <a>Name</a> and
--   concatenates results. Attempts to strip out an irrelevant prefix it
--   may have (i.e. <a>remoteName</a>).
branchesToName :: Text -> [Branch a] -> Text

-- | Constructs an <a>AnyBranch</a> wrapper around a <a>Branch</a> a where
--   a is <a>Merged</a> if passed <a>True</a>, <a>UnMerged</a> otherwise.
mkAnyBranch :: Name -> Author -> Day -> Bool -> AnyBranch
instance GHC.Show.Show Types.Branch.AnyBranch
instance GHC.Show.Show (Types.Branch.Branch a)

module Types.Nat

-- | Represents a non-negative <a>Integer</a>.
data Nat

-- | Constructs <a>Maybe</a> <a>Nat</a> as &lt;math&gt;
mkNat :: Integer -> Maybe Nat
unNat :: Nat -> Integer
instance GHC.Show.Show Types.Nat.Nat
instance GHC.Classes.Eq Types.Nat.Nat


-- | Provides <a>Env</a> type.
module Types.Env

-- | Describes the branch type.
data BranchType
All :: BranchType
Remote :: BranchType
Local :: BranchType

-- | The Env type to be used with Reader.
data Env
Env :: Maybe Text -> Maybe FilePath -> Nat -> BranchType -> Text -> Text -> Day -> Env

-- | A <a>String</a> to filter branch names on. <a>Just</a> <i>s</i> if
--   non-empty, <a>Nothing</a> otherwise.
[grepStr] :: Env -> Maybe Text

-- | The path of the git directory. <a>Just</a> <i>s</i> if non-empty,
--   <a>Nothing</a> otherwise.
[path] :: Env -> Maybe FilePath

-- | A non-negative integer descrbing stale threshold in days.
[limit] :: Env -> Nat

-- | The type of branches to search.
[branchType] :: Env -> BranchType

-- | The name of the remote.
[remoteName] :: Env -> Text

-- | The name of the branch to consider merges against.
[master] :: Env -> Text

-- | Today's date.
[today] :: Env -> Day

-- | Maps a <a>BranchType</a> to a <a>String</a> flag to be used in
--   <a>Core.MonadStaleBranches</a>' <a>branchNamesByGrep</a> command.
branchTypeToArg :: BranchType -> String
instance GHC.Show.Show Types.Env.Env
instance GHC.Show.Show Types.Env.BranchType
instance GHC.Classes.Eq Types.Env.BranchType


-- | Provides the main component used in this application.
module App
newtype AppT m a
AppT :: ReaderT Env m a -> AppT m a
[runAppT] :: AppT m a -> ReaderT Env m a
instance GHC.Base.Monad m => Control.Monad.Reader.Class.MonadReader Types.Env.Env (App.AppT m)
instance Control.Monad.Trans.Class.MonadTrans App.AppT
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (App.AppT m)
instance GHC.Base.Monad m => GHC.Base.Monad (App.AppT m)
instance GHC.Base.Applicative m => GHC.Base.Applicative (App.AppT m)
instance GHC.Base.Functor m => GHC.Base.Functor (App.AppT m)


-- | Handles parsing of String args into Env.
module Parsing.Core

-- | Maps <a>Day</a> and parsed [<a>String</a>] args into <a>Right</a>
--   <a>Env</a>, returning any errors as <a>Left</a> <a>String</a>. All
--   arguments are optional (i.e. an empty list is valid), but if any are
--   provided then they must be valid or an error will be returned. Valid
--   arguments are:
--   
--   <pre>
--   --grep=&lt;string&gt;
--       Used for filtering on branch names. Any <a>String</a> is fine, including
--       the empty string (i.e. --grep=). Defaults to the empty string.
--   
--   --path=&lt;string&gt;
--       Path to the git directory. Any <a>String</a> is fine, including the empty
--       string (i.e. --path=). Defaults to /share.
--   
--   --limit=&lt;days&gt;
--       Determines if a branch should be considered stale. Must be a
--       non-negative integer. Defaults to 30.
--   
--   --branchType=&lt;a[ll]|r[emote]|l[ocal]&gt;
--       Determines which branches we should search. Must be one of
--       [a, all, r, remote, l, local]. Defaults to remote.
--   
--   --remote=&lt;string&gt;
--       Name of the remote, used for stripping out the the remote name for
--       display purposes. Any <a>String</a> is fine, including the empty string
--       (i.e. --remote=). Defaults to origin.
--   
--   --master=&lt;string&gt;
--       Name of the branch to consider merges against. Any <a>String</a> is fine,
--       including the empty string (i.e. --master=). Defaults to origin/master.
--   </pre>
parseArgs :: Day -> [String] -> Either String Env
instance GHC.Show.Show Parsing.Core.ArgHolder
instance GHC.Classes.Eq Parsing.Core.ArgHolder


-- | Exports utility functions mainly for parsing/transforming between
--   types/errors.
module Core.Internal

-- | Tests for bad branches based on presence of <i>*</i> and <i>&gt;</i>.
badBranch :: Text -> Bool

-- | Joins nested <a>Either</a>s.
exceptToErr :: Show a => Either a (Either Err b) -> Either Err b

-- | Parses <a>NameLog</a> into <a>NameAuthDay</a>, recording errors as
--   <a>ErrOr</a>.
parseLog :: NameLog -> ErrOr NameAuthDay

-- | Intermediate parsing of <a>NameLog</a> into <a>NameAuthDateStr</a>,
--   recording errors as <a>ErrOr</a>.
parseAuthDateStr :: NameLog -> ErrOr NameAuthDateStr

-- | Intermediate parsing of <a>NameAuthDateStr</a> into
--   <a>NameAuthDay</a>, recording errors as <a>ErrOr</a>.
parseDay :: NameAuthDateStr -> ErrOr NameAuthDay

-- | Safely reads <a>Text</a> into <a>ErrOr</a> <a>Int</a>.
safeRead :: Text -> ErrOr Int

-- | Determines if <a>NameAuthDay</a> is stale given by
--   
--   <pre>
--   stale lim day (_, _, d) &lt;=&gt; day - d &gt; lim
--   </pre>
stale :: Nat -> Day -> NameAuthDay -> Bool

-- | For <a>Right</a> <a>NameAuthDay</a>, behaves the same as <a>stale</a>.
--   But for <a>Left</a> <a>Err</a> it is always true, since we do not want
--   to filter out errors.
staleNonErr :: Nat -> Day -> ErrOr NameAuthDay -> Bool

-- | Strips whitespace and potential git prefix (i.e. remotes/). Works for
--   strings with no prefix and those that have the prefix exactly once,
--   e.g.
--   
--   <pre>
--   textToName "branch" -&gt; branch
--   textToName "remotes/origin/branch" -&gt; origin/branch
--   textToName "blah/remotes/origin/branch" -&gt; origin/branch
--   </pre>
--   
--   Returns <a>Left</a> <a>ParseName</a> if the prefix occurs more than
--   once as we have definitely entered undefined territory.
textToName :: Text -> ErrOr Name

-- | Unsafely reads <a>Text</a> to <a>Int</a>.
unsafeToInt :: Text -> Int


-- | Exports functions to be used by <a>Core.MonadStaleBranches</a> for
--   <a>IO</a>.
module Core.IO

-- | Maps a <a>NameAuthDay</a> on <a>FilePath</a> to <a>AnyBranch</a>.
--   Returns <a>Left</a> <a>Err</a> if any errors occur, <a>Right</a>
--   <a>NameAuthDay</a> otherwise.
errTupleToBranch :: Maybe FilePath -> Text -> ErrOr NameAuthDay -> IO (ErrOr AnyBranch)

-- | Runs an <a>IO</a> action and logs the error if any occur.
logIfErr :: forall a. IO a -> IO a

-- | Retrieves the log information for a given branch <a>Name</a> on
--   <a>FilePath</a>. Returns <a>Left</a> <a>Err</a> if any errors occur,
--   <a>Right</a> <a>NameAuthDay</a> otherwise.
nameToLog :: Maybe FilePath -> ErrOr Name -> IO (ErrOr NameAuthDay)

-- | Runs a shell command given by <a>Text</a> on <a>FilePath</a>.
sh :: Text -> Maybe FilePath -> IO Text


-- | Provides a <a>Results</a> type that wraps two maps, one for merged
--   branches and one for unmerged.
module Types.Results

-- | Wrapper for holding <a>Map</a> <a>Author</a> [<a>Branch</a> a] data.
data Results
Results :: BranchMap 'Merged -> BranchMap 'UnMerged -> Results

-- | <a>Map</a> <a>Author</a> [<a>Branch</a> <a>Merged</a>]
[mergedMap] :: Results -> BranchMap 'Merged

-- | <a>Map</a> <a>Author</a> [<a>Branch</a> <a>UnMerged</a>]
[unMergedMap] :: Results -> BranchMap 'UnMerged

-- | Displays <a>Results</a>. Differs from <a>Show</a> in that it is
--   formatted differently and strips the <a>Text</a> <i>prefix</i> from
--   the branch names.
displayResults :: Text -> Results -> Text

-- | Maps [<a>AnyBranch</a>] to <a>Results</a>. Pattern matches on
--   <a>AnyBranch</a> to reveal the underlying <a>BranchStatus</a>,
--   ensuring merged and unmerged branches are organized separately.
toResults :: [AnyBranch] -> Results
instance GHC.Show.Show Types.Results.Results


-- | Provides a <a>ResultsWithErrs</a> type that wraps <a>Results</a> along
--   with a list of errors.
module Types.ResultsWithErrs

-- | Wraps <a>Results</a> and includes [<a>Err</a>].
data ResultsWithErrs
ResultsWithErrs :: [Err] -> Results -> ResultsWithErrs

-- | All errors encountered.
[errList] :: ResultsWithErrs -> [Err]

-- | The <a>Results</a>.
[results] :: ResultsWithErrs -> Results

-- | Displays <a>ResultsWithErrs</a>. Differs from <a>Show</a> in that it
--   is formatted differently and strips the <a>Text</a> <i>prefix</i> from
--   the branch names.
displayResultsWithErrs :: Text -> ResultsWithErrs -> Text

-- | Maps [<a>ErrOr</a> <a>AnyBranch</a>] to <a>ResultsWithErrs</a>.
toResultsWithErrs :: [ErrOr AnyBranch] -> ResultsWithErrs
instance GHC.Show.Show Types.ResultsWithErrs.ResultsWithErrs


-- | The MonadStaleBranches class.
module Core.MonadStaleBranches

-- | The <a>MonadStaleBranches</a> class is used to describe interacting
--   with a git filesystem.
class Monad m => MonadStaleBranches m where {
    
    -- | Adds custom handling to returned data (e.g. for error handling).
    type family Handler m a :: Type;
    
    -- | The type returned by <a>collectResults</a>.
    type family FinalResults m :: Type;
}

-- | Returns a [<a>Name</a>] representing git branches.
branchNamesByGrep :: MonadStaleBranches m => m [Handler m Name]

-- | Maps [<a>Name</a>] to [<a>NameAuthDay</a>], filtering out non-stale
--   branches.
getStaleLogs :: MonadStaleBranches m => [Handler m Name] -> m (Filtered (Handler m NameAuthDay))

-- | Maps [<a>NameAuthDay</a>] to [<a>AnyBranch</a>].
toBranches :: MonadStaleBranches m => Filtered (Handler m NameAuthDay) -> m [Handler m AnyBranch]

-- | Collects [<a>AnyBranch</a>] into <a>FinalResults</a>.
collectResults :: MonadStaleBranches m => [Handler m AnyBranch] -> m (FinalResults m)

-- | Displays results.
display :: MonadStaleBranches m => FinalResults m -> m ()

-- | High level logic of <a>MonadStaleBranches</a> usage. This function is
--   the entrypoint for any <a>MonadStaleBranches</a> instance.
runGitUtils :: MonadStaleBranches m => m ()
instance Control.Monad.IO.Class.MonadIO m => Core.MonadStaleBranches.MonadStaleBranches (App.AppT m)
